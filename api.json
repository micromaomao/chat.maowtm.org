{
  "openapi": "3.0.3",
  "info": {
    "title": "MaoChat API",
    "description": "This is a sample description about this spec.",
    "termsOfService": "",
    "contact": {
      "email": "m@maowtm.org"
    },
    "license": {
      "name": "MIT",
      "url": ""
    },
    "version": "v1"
  },
  "externalDocs": {
    "description": "",
    "url": ""
  },
  "servers": [
    {
      "url": "https://chat.maowtm.org/api/v1",
      "description": ""
    }
  ],
  "tags": [
    {
      "name": "admin",
      "description": "Requires admin authentication",
      "externalDocs": {
        "description": "",
        "url": ""
      }
    }
  ],
  "paths": {
    "/chat-session": {
      "post": {
        "summary": "Start a new chat session",
        "description": "Optional authentication with adminToken",
        "operationId": "",
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_tag": {
                    "$ref": "#/components/schemas/IdempotentTag"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewChatSessionResponse"
                }
              }
            },
            "description": "Success"
          },
          "503": {
            "description": "Server is not accepting new chat sessions",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "Chat disabled",
                  "description": "Short explanation"
                }
              }
            }
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      },
      "parameters": []
    },
    "/chat-session/{session_id}": {
      "get": {
        "summary": "Fetch messages in a chat session.",
        "description": "If there are more messages than `limit`, the latest `limit` messages are returned.",
        "operationId": "",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "Only return this many messages.",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "in": "query",
            "name": "until",
            "description": "If provided, only messages older than this is returned.",
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "chat_token",
            "description": "Chat token authentication",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSession"
                }
              }
            },
            "description": "Success"
          },
          "404": {
            "description": "Invalid chat ID or token"
          }
        },
        "security": [
          {
            "chatToken": []
          },
          {
            "adminToken": []
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/chat-session/{session_id}/stream": {
      "get": {
        "summary": "Stream new updates from a chat session using server-sent events",
        "description": "Push any future update to the messages in a chat session via server-sent events.\n\nTo authenticate, provide either `chatToken` or `adminToken`.",
        "operationId": "",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "chat_token",
            "description": "Chat token authentication",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "headers": {},
            "content": {
              "text/event-stream": {
                "schema": {
                  "$ref": "#/components/schemas/ChatSessionEventStream"
                }
              }
            }
          },
          "404": {
            "description": "Invalid chat ID or token"
          }
        },
        "security": [
          {
            "chatToken": []
          },
          {
            "adminToken": []
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/chat-session/{session_id}/send-chat": {
      "post": {
        "summary": "Send a chat message as user",
        "description": "Authenticated with `chatToken` only to prevent admins from sending chat messages to chats which they don't own.",
        "operationId": "",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "chat_token",
            "description": "Chat token authentication",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Content of the chat message to send",
                    "minLength": 1,
                    "maxLength": 1000
                  },
                  "client_tag": {
                    "$ref": "#/components/schemas/IdempotentTag"
                  }
                },
                "required": [
                  "message"
                ]
              }
            }
          },
          "description": ""
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text": {
                "schema": {
                  "type": "string",
                  "description": "ID of the newly created message.",
                  "example": "01H5FX429ZT99TA8Z5F5E0WW9Z"
                }
              }
            }
          },
          "404": {
            "description": "Invalid chat ID or token"
          },
          "503": {
            "description": "Server is not accepting new chats"
          }
        },
        "security": [
          {
            "chatToken": []
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "session_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/messages/{msg_id}/inspect-last-edit": {
      "get": {
        "summary": "",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InspectLastEditResult"
                }
              }
            }
          },
          "401": {
            "description": "No admin auth"
          },
          "404": {
            "description": "Message not found"
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "msg_id",
          "description": "ID of the bot reply message",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/messages/{msg_id}/reply-analysis": {
      "get": {
        "summary": "Get meta-information about how a reply was generated, such as the match tree",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplyAnalysis"
                }
              }
            }
          },
          "401": {
            "description": "No admin auth"
          },
          "404": {
            "description": "Invalid message ID"
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "msg_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/messages/{msg_id}/edit-bot": {
      "put": {
        "summary": "Alter or create dialogue items related to a chat response",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditChatRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "Invalid admin token"
          },
          "404": {
            "description": "Invalid message ID"
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "msg_id",
          "description": "Message ID, or blank to not associate this edit with a chat message.",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    },
    "/list-chat-sessions": {
      "get": {
        "summary": "List all stored chat sessions",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "description": "",
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "default": 1000
            }
          },
          {
            "in": "query",
            "name": "until",
            "description": "",
            "schema": {
              "type": "string"
            },
            "allowReserved": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListChatSessionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "No admin auth token"
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      }
    },
    "/debug-embeddings": {
      "get": {
        "summary": "An endpoint to support inspecting embeddings",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "input",
            "description": "Input(s)",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1000
              },
              "minItems": 1,
              "maxItems": 30
            },
            "required": true,
            "allowReserved": true
          },
          {
            "in": "query",
            "name": "model",
            "description": "Which embedding model to use",
            "schema": {
              "type": "string"
            },
            "required": true,
            "allowReserved": true
          }
        ],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "embeddings": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "type": "number"
                        },
                        "minItems": 1
                      },
                      "minItems": 1
                    },
                    "similarities": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      },
                      "minItems": 0
                    },
                    "total_tokens": {
                      "type": "integer",
                      "minimum": 1
                    }
                  },
                  "required": [
                    "embeddings",
                    "similarities",
                    "total_tokens"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "No admin auth"
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      }
    },
    "/global-config": {
      "get": {
        "summary": "Get global configuration",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "description": "Configuration object"
                }
              }
            },
            "headers": {
              "ETag": {
                "in": "header",
                "description": "Immutable config version",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "401": {
            "description": "No admin auth"
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      },
      "put": {
        "summary": "Set global configuration",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "If-Match",
            "description": "Specify a previous ETag here to ensure safe partial update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {},
                "description": "Configuration object"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid If-Match"
          },
          "401": {
            "description": "No admin auth"
          },
          "412": {
            "description": "If-Match indicates that there was a race."
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      }
    },
    "/dialogue-item/{item_id}": {
      "get": {
        "summary": "Get details about a dialogue item",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DialogueItemDetails"
                }
              }
            }
          },
          "401": {
            "description": "No admin auth"
          },
          "404": {
            "description": "Invalid item id"
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "item_id",
          "description": "",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete a dialogue item",
        "description": "In the case where \"recursive\" is set to false, all child items will be moved to under the parent, or become root, if the item being deleted is already root.",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "recursive",
            "description": "Whether to also delete all direct and indirect children.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {},
        "responses": {
          "204": {
            "description": "Success"
          },
          "401": {
            "description": "No admin auth"
          },
          "404": {
            "description": "Dialogue item not found"
          }
        },
        "security": [
          {
            "adminToken": []
          }
        ]
      }
    },
    "/list-dialogue-items": {
      "get": {
        "summary": "Get a list of all dialogue groups and root-level dialogue items",
        "description": "",
        "operationId": "",
        "tags": [
          "admin"
        ],
        "parameters": [],
        "requestBody": {},
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListDialogueItemsResult"
                }
              }
            }
          },
          "401": {
            "description": "No admin auth"
          }
        }
      }
    },
    "/messages/{msg_id}/rollback-chat": {
      "post": {
        "summary": "Roll back the chat to before this message was sent.",
        "description": "Mark this and all following messages in this chat as \"excluded\", so that following chat replies will be generated as if those messages has not happened (effectively rolling back the chat, but preserving the history for user to see).\n\nRequires chat token to prevent accidental modification of user's chat from admins.",
        "operationId": "",
        "tags": [],
        "parameters": [
          {
            "in": "query",
            "name": "chat_token",
            "description": "",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {},
        "responses": {
          "204": {},
          "401": {
            "description": "Bad chat token",
            "content": {}
          },
          "404": {
            "description": "Bad message ID"
          }
        },
        "security": [
          {
            "chatToken": []
          }
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "msg_id",
          "description": "Chat ID",
          "schema": {
            "type": "string"
          },
          "required": true
        }
      ]
    }
  },
  "components": {
    "schemas": {
      "NewChatSessionResponse": {
        "type": "object",
        "properties": {
          "session_id": {
            "type": "string",
            "description": "chat ID",
            "example": "01H5FMG00F2N8EM9365KSSMYG9"
          },
          "chat_token": {
            "type": "string",
            "description": "Token for authentication",
            "example": "efd0etaewtyv0ry+lmcpperfyfzoxgzz"
          }
        },
        "description": "Information about a newly created chat session",
        "required": [
          "session_id",
          "chat_token"
        ]
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Message ID",
            "example": "01H5FNEQ6TSSP9ZJ8T2RKAGGGD"
          },
          "session": {
            "type": "string",
            "description": "ID of the chat session which this message belongs to. Property may not exist if this is implied (such as as part of a event stream response for a chat)",
            "example": "01H5FMG00F2N8EM9365KSSMYG9"
          },
          "msg_type": {
            "$ref": "#/components/schemas/MessageType"
          },
          "content": {
            "type": "string",
            "description": "Content of the message",
            "example": "Hello!"
          },
          "metadata": {
            "$ref": "#/components/schemas/BriefMessageMetadata"
          },
          "client_tag": {
            "type": "string",
            "description": "The idempotent tag provided by the client in send_chat request. Not available if too long since message creation.",
            "maxLength": 48,
            "example": "r9/dZCAekueKMhZ4bYETLMdz"
          },
          "exclude_from_generation": {
            "type": "boolean",
            "description": "True if this message will be hidden from the chat history referenced by generation code. For example this will be true if this message has been replaced by an attempted \"regenerate response\", or if this message violates the terms of use."
          }
        },
        "description": "Create or update a message.",
        "required": [
          "id",
          "msg_type",
          "content",
          "exclude_from_generation"
        ]
      },
      "BriefMessageMetadata": {
        "type": "object",
        "properties": {
          "updated_before": {
            "type": "boolean",
            "default": false,
            "description": "Only visible to admin"
          },
          "user_feedback": {
            "type": "integer",
            "minimum": -1,
            "maximum": 1
          }
        },
        "description": "Some short message metadata.",
        "required": [
          "user_feedback"
        ]
      },
      "MetadataDialoguePath": {
        "type": "array",
        "nullable": true,
        "items": {
          "$ref": "#/components/schemas/DialoguePathElement"
        },
        "description": "A dialogue item's path, from root to child, including the item itself",
        "minItems": 1
      },
      "ChatSessionEventStream": {
        "type": "object",
        "properties": {
          "message": {
            "$ref": "#/components/schemas/Message"
          },
          "deleteMessage": {
            "type": "string",
            "description": "Signal that a message should be hidden. Value is the message ID.",
            "example": "01H5FNEQ6TSSP9ZJ8T2RKAGGGD"
          },
          "suggestions": {
            "$ref": "#/components/schemas/ChatSuggestions"
          },
          "ping": {
            "type": "string",
            "description": "A ping message sent periodically every 5 seconds to allow the client to detect dead connections",
            "example": "ping"
          }
        },
        "description": "A sequence of server-sent events, can be any of the following event type:"
      },
      "ChatSuggestions": {
        "type": "object",
        "properties": {
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Suggested text",
              "example": "Why do you like Rust?"
            },
            "description": "Suggested follow-up replies for a chat",
            "minItems": 1,
            "maxItems": 3,
            "uniqueItems": true,
            "example": [
              "Why do you like Rust?",
              "How much Rust have you written?"
            ]
          },
          "reply_msg": {
            "type": "string",
            "description": "ID of the bot message for which this set of suggestions is attached to",
            "example": "01H5FNEQ6TSSP9ZJ8T2RKAGGGD"
          }
        },
        "description": "Suggested follow-up replies for a chat",
        "required": [
          "suggestions",
          "reply_msg"
        ]
      },
      "MessageType": {
        "type": "string",
        "description": "Type of a chat message",
        "enum": [
          "bot",
          "user",
          "error"
        ],
        "example": "bot"
      },
      "IdempotentTag": {
        "type": "string",
        "description": "Optional - an arbitrary, max-48-chars tag provided by the client. For a limited period onwards, follow-on requests with the same tag are ignored (and returns the previously returned response). This tag is also returned in other useful context. You must ensure that this tag is a securely generated unique value per intended request.",
        "example": "r9/dZCAekueKMhZ4bYETLMdz",
        "minLength": 1,
        "maxLength": 48
      },
      "ChatSession": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "A list of messages requested"
          },
          "last_suggestions": {
            "$ref": "#/components/schemas/ChatSuggestions"
          }
        },
        "description": "Details of a chat session. How many messages are returned depends on the request parameter. `last_suggestions` may not be present if there are no suggestions, or if the last message is from the user.",
        "required": [
          "messages"
        ]
      },
      "EditChatRequest": {
        "type": "object",
        "properties": {
          "item_id": {
            "type": "string",
            "example": "01H5FZF1Y1B718D069CMYDEQJR",
            "description": "The ID of the dialogue item, if updating an existing one. If this is not provided, `parent_id` must be provided instead."
          },
          "parent_id": {
            "type": "string",
            "example": "01H5FZF1Y1B718D069CMYDEQJR",
            "nullable": true,
            "description": "If creating a new child, the ID of the dialogue under which the new dialogue item will be created. If creating a new root dialogue (in a new dialogue group), this must be the json value `null`."
          },
          "phrasings": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 1000
            },
            "description": "List of phrasings. First element will be the canonical one used for representing this dialogue item, and further elements are considered alternatives.",
            "minItems": 1,
            "uniqueItems": true
          },
          "reply": {
            "type": "string",
            "description": "What the expected reply for this dialogue is.",
            "minLength": 1,
            "maxLength": 1000
          },
          "client_tag": {
            "$ref": "#/components/schemas/IdempotentTag"
          }
        },
        "required": [
          "phrasings",
          "reply"
        ],
        "description": "Only one of `item_id` or `parent_id` should exist."
      },
      "ListChatSessionsResponse": {
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "session_id": {
                  "type": "string",
                  "example": "01H8SEQBJN01M10N6R4WPBZ7KJ"
                },
                "last_messages": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Message"
                  },
                  "description": "Last 6 messages",
                  "maxItems": 6,
                  "minItems": 0
                }
              },
              "description": "Preview of a session",
              "required": [
                "session_id",
                "last_messages"
              ]
            }
          },
          "total_sessions": {
            "type": "integer",
            "description": "Total number of sessions on the server",
            "example": 10
          },
          "total_user_messages": {
            "type": "integer",
            "example": 100
          }
        },
        "required": [
          "sessions",
          "total_sessions",
          "total_user_messages"
        ]
      },
      "FetchedDialogueItemData": {
        "type": "object",
        "properties": {
          "phrasings": {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1,
              "maxLength": 1000
            },
            "description": "List of phrasings. First element will be the canonical one used for representing this dialogue item, and further elements are considered alternatives.",
            "minItems": 1,
            "uniqueItems": true
          },
          "reply": {
            "type": "string"
          },
          "path": {
            "$ref": "#/components/schemas/MetadataDialoguePath"
          },
          "group_id": {
            "type": "string",
            "description": "ID of the dialogue group this item belongs to",
            "example": "01H72XYPNGZP4G49SGB6TPG3FV"
          }
        },
        "required": [
          "phrasings",
          "reply",
          "path",
          "group_id"
        ]
      },
      "InspectLastEditResult": {
        "type": "object",
        "properties": {
          "edited": {
            "type": "boolean",
            "example": true
          },
          "updated_dialogue_item": {
            "$ref": "#/components/schemas/FetchedDialogueItemData"
          },
          "prev_reply_path": {
            "$ref": "#/components/schemas/MetadataDialoguePath"
          }
        },
        "required": [
          "edited"
        ],
        "description": "If `edited` is true, `updated_dialogue_item` will exist. Otherwise, `prev_reply_path` will exist, and will be either `null`, or the path of the previous reply, useful for creating a new child under that."
      },
      "DialogueItemDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the dialogue item"
          },
          "item_data": {
            "$ref": "#/components/schemas/FetchedDialogueItemData"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DialoguePathElement"
            }
          }
        },
        "required": [
          "id",
          "children",
          "item_data"
        ]
      },
      "DialoguePathElement": {
        "type": "object",
        "properties": {
          "dialogue_id": {
            "type": "string",
            "example": "01H5FQ2CCMX9P8ZT6XA80RR9MQ"
          },
          "canonical_phrasing_text": {
            "type": "string",
            "example": "What is your favourite programming language?",
            "minLength": 1
          }
        },
        "required": [
          "dialogue_id",
          "canonical_phrasing_text"
        ]
      },
      "ListDialogueItemsResult": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "group_id": {
                  "type": "string",
                  "example": "01H732ZGMXD2GXH76P3M0ZSNSJ"
                },
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DialoguePathElement"
                  }
                }
              },
              "required": [
                "group_id",
                "items"
              ]
            },
            "description": "List of dialogue groups"
          }
        },
        "required": [
          "groups"
        ]
      },
      "MessageMatchResult": {
        "type": "object",
        "properties": {
          "available": {
            "type": "boolean"
          },
          "match_trees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageMatchResultMatchTree"
            },
            "minItems": 0
          },
          "has_missing_items": {
            "type": "boolean"
          },
          "has_missing_phrasings": {
            "type": "boolean"
          }
        },
        "required": [
          "available"
        ]
      },
      "MessageMatchResultMatchTree": {
        "type": "object",
        "properties": {
          "this_item": {
            "type": "string",
            "description": "ID of the dialogue item matched",
            "example": "01H8725DD9A33W8RGK379M67GB"
          },
          "selected_phrasing": {
            "type": "string",
            "description": "Text of the phrasing presented to the model"
          },
          "response": {
            "type": "string",
            "description": "The item's response text"
          },
          "max_score": {
            "type": "number",
            "description": "Max score among this and child items",
            "example": 0.999
          },
          "children": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {},
              "description": "Recursive MessageMatchResultMatchTree"
            }
          }
        },
        "required": [
          "this_item",
          "max_score",
          "selected_phrasing",
          "children",
          "response"
        ]
      },
      "ReplyAnalysis": {
        "type": "object",
        "properties": {
          "match_result": {
            "$ref": "#/components/schemas/MessageMatchResult"
          },
          "suggestions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 0,
            "maxItems": 3,
            "uniqueItems": true
          }
        },
        "required": [
          "match_result",
          "suggestions"
        ]
      }
    },
    "securitySchemes": {
      "chatToken": {
        "type": "apiKey",
        "in": "query",
        "name": "chat_token",
        "allowReserved": true
      },
      "adminToken": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  },
  "security": []
}